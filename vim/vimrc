" Adam Nelson's Global VIMRC
"
" This file contains settings common to all Vim instances
" that I use, on any machine. It should not be used as the
" primary VIMRC file for any Vim instance. Instead, it
" should be sourced from the primary VIMRC, and the primary
" VIMRC can contain any local modifications to the file.
" ---------------------------------------------------------

source ~/etc/vim/plugins.vim

" Basic Options {{{ ---------------------------------------

" sensible.vim should be loaded by Vundle by default, so
" a lot of standard options are missing from here.

" Enable omni completion.
filetype plugin on
set ofu=syntaxcomplete#Complete

" Enable the mouse on the console.
set mouse=a

" Get rid of annoying beeping!
set noerrorbells
set visualbell
set t_vb=
au GUIEnter * set vb t_vb=
set shortmess+=I

" Use spaces instad of tabs. Indent 2 spaces by default.
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=4
filetype plugin indent on

" Scroll before the cursor reaches the edge of the window.
set scrolloff=8
set sidescroll=1
set sidescrolloff=15

" Don't close the current buffer when opening a new one.
set hidden

" Substitute globally by default
set gdefault

" Text wrapping
set textwidth=80
set formatoptions=cjqrn1

" Sensible options for omni select
set completeopt=longest,menuone

" Default window dimensions
set winwidth=79
set winheight=5
set winminheight=5

" Set the console window title
set title

" }}} -----------------------------------------------------
" Appearance {{{ ------------------------------------------

" Set the color scheme.
colors jellybeans
set cursorline

" Always show line numbers.
set number
set numberwidth=3

" Highlight search results.
set hlsearch

" Highlight matching brackets.
set showmatch

" No line wrapping for source code.
set nowrap

" HOWEVER, enable line wrapping for plaintext, Markdown, and TeX files!
function! SetWrap()
  setlocal wrap linebreak nolist
  setlocal formatoptions+=t
  nnoremap <buffer> <Up> gk
  nnoremap <buffer> <Down> gj
  vnoremap <buffer> <Up> gk
  vnoremap <buffer> <Down> gj
  inoremap <buffer> <Up> <C-o>gk
  inoremap <buffer> <Down> <C-o>gj
endfunction
function! SetNoWrap()
  setlocal nowrap
  setlocal formatoptions-=t
  unmap <buffer> <Up>
  unmap <buffer> <Down>
endfunction
autocmd FileType txt,markdown,tex call SetWrap()
"set showbreak=…

" }}} -----------------------------------------------------
" Backup, Swap, and Undo Directories {{{ ------------------

set backup
if exists("+undofile")
  set undofile
end

if has('win32')
  " On Windows, store everything under ~\AppData\Local\Vim

  set shellslash
  if isdirectory($HOME . '\\AppData\\Local\\Vim\\swap') == 0
    :silent !mkdir \%USERPROFILE\%\AppData\Local\Vim\swap
  endif
  if isdirectory($HOME . '\\AppData\\Local\\Vim\\backup') == 0
    :silent !mkdir \%USERPROFILE\%\AppData\Local\Vim\backup
  endif
  if isdirectory($HOME . '\\AppData\\Local\\Vim\\undo') == 0
    :silent !mkdir \%USERPROFILE\%\AppData\Local\Vim\undo
  endif
  set directory=~/AppData/Local/Vim/swap//,c:/tmp//,c:/temp//,.
  set backupdir=~/AppData/Local/Vim/backup//,c:/tmp//,c:/temp//,.
  if exists("+undofile")
    set undodir=~/AppData/Local/Vim/undo//
  endif

else
  " On Linux, store everything under ~/.vim-cache

  if isdirectory($HOME . '/.vim-cache/swap') == 0
    :silent !mkdir -p ~/.vim-cache/swap
  endif
  if isdirectory($HOME . '/.vim-cache/backup') == 0
    :silent !mkdir -p ~/.vim-cache/backup
  endif
  if isdirectory($HOME . '/.vim-cache/undo') == 0
    :silent !mkdir -p ~/.vim-cache/undo
  endif
  set directory=~/.vim-cache/swap//,~/tmp//,/tmp//,.
  set backupdir=~/.vim-cache/backup//,~/tmp//,/tmp//,.
  if exists("+undofile")
    set undodir=~/.vim-cache/undo//
  endif
endif

" }}} -----------------------------------------------------
" Plugin Options {{{ -----------------------------------

" Ack
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
command! -nargs=+ Ag :Ack <args>

" Netrw (emulate NerdTree with builtin file browser)
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_winsize = 18

" Polyglot
let g:polyglot_disabled = ['haskell', 'typescript', 'javascript']

" Rainbow Parentheses
let g:rainbow#blacklist = [188] " don't use plain white
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'jellybeans'
let g:airline_skip_empty_sections = 1
let g:airline_inactive_collapse = 1
let g:airline_detect_spelllang = 0
let g:airline_highlighting_cache = 1
let g:airline_section_y = ''

" LanguageClient/ALE
let g:LanguageClient_diagnosticsList = 'location'
let g:ale_sign_error = '✘→'
let g:ale_sign_warning = '!→'

" Deoplete
let g:deoplete#enable_at_startup = 1

" Echodoc
set noshowmode
let g:echodoc_enable_at_startup = 1
let g:echodoc#type = 'signature'

let g:ctrlp_match_window_reversed = 0
set wildignore+=*.pyc,*.png,*.jpg,*.gif,*.PNG,*.JPG,*.GIF,*.pdf,*.o,*.obj,.hg
set wildignore+=*/Archive/*,*.jar,*.class,*.doc,*.rtf,*.ppt,*.zip,*.gz,*.bz2
set wildignore+=*.lzma,*.7z,*.exe,*.dll,*.so.*,*~,*.wav,*.mp3,*.flac,*.ogg
set wildignore+=*.ttf,*.mpg,*.avi,*.MPG,*.AVI,*.mp4,*.divx,*.wma,*.wmv
set wildignore+=*.a,*.hi,*/target/*,*/build/*,*/dist/*,*/node_modules/*

" }}} -----------------------------------------------------
" Language Support {{{ -------------------------------------

let g:ale_linters = { 'haskell': [], 'javascript': ['eslint'], 'css': [], 'sass': [], 'scss': [] }
let g:haskell_enable_quantification = 1
let g:haskell_enable_recursivedo = 1

autocmd FileType haskell,lhaskell setl keywordprg=hoogle\ --count=10
"autocmd FileType haskell,lhaskell setl formatprg=xargs\ pointfree

command! -range Pf <line1>,<line2>!pointfree "$(cat)"
command! -range Unpf <line1>,<line2>!pointful "$(cat)" | sed 's/^(\(.*\))$/\1/'

function! TypescriptLocalSettings()
  let g:vcm_omni_pattern='.'
  nnoremap <buffer> K :ALEHover<CR>
  nnoremap <buffer> <localleader>q :ALEFix<CR>
  nnoremap <buffer> <localleader>d :ALEGoToDefinition<CR>
  nnoremap <buffer> <localleader>r :ALEFindReferences<CR>
endfunction

function! PrettierOnSave(parser)
  if filereadable('.prettierrc')
    mark p
    execute '%!npx prettier --config .prettierrc --parser ' . a:parser
    if v:shell_error
      %print
      undo
    endif
    normal! g'p
  else
    echo "No .prettierrc available!"
  endif
endfunction

function! LanguageClientKeyBindings()
  nnoremap <buffer> Q :call LanguageClient#explainErrorAtPoint()<CR>
  nnoremap <buffer> <localleader>k :call LanguageClient#textDocument_hover()<CR>
  nnoremap <buffer> <localleader>d :call LanguageClient#textDocument_definition()<CR>
  nnoremap <buffer> <localleader>r :call LanguageClient#textDocument_rename()<CR>
  nnoremap <buffer> <localleader>b :call LanguageClient#textDocument_references()<CR>
  nnoremap <buffer> <localleader>a :call LanguageClient#textDocument_codeAction()<CR>
  nnoremap <buffer> <localleader>s :call LanguageClient#textDocument_documentSymbol()<CR>
endfunction

au BufRead,BufNewFile *.txt set filetype=txt
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.gradle set filetype=gradle
au BufRead,BufNewFile *.sig set filetype=sml
au BufRead,BufNewFile *?Script.sml source ~/etc/vim/hol4/hol.vim
au BufRead,BufNewFile *.h++ set filetype=cpp
au BufRead,BufNewFile *.sld set filetype=scheme
au FileType java,scala set tw=100
au FileType json setl formatprg=jq\ .\ -
au FileType typescript call TypescriptLocalSettings()
au FileType lisp,scheme,clojure RainbowParentheses
au FileType html,css,sass,scss setlocal iskeyword+=-
au FileType txt,markdown call deoplete#custom#buffer_option('auto_complete', v:false)
au BufWritePre *.js,*.jsx,*.mjs call PrettierOnSave('babel')
au BufWritePre *.ts,*.tsx call PrettierOnSave('typescript')
au BufWritePre *.scss call PrettierOnSave('scss')

au FileType css,scss,lisp,scheme,clojure :syntax sync fromstart

let g:tex_flavor='latex'

hi link ALEError Error
hi Warning term=underline cterm=underline ctermfg=Yellow gui=undercurl guisp=Gold
hi link ALEWarning Warning
hi link ALEInfo SpellCap

let g:LanguageClient_serverCommands = {
  \ 'haskell'   : ['~/.local/bin/hie'],
  \ 'lhaskell'   : ['~/.local/bin/hie'],
  \ 'javascript': ['javascript-typescript-stdio'],
  \ 'javascript.jsx': ['javascript-typescript-stdio'],
  \ 'sass': ['css-languageserver', '--stdio'],
  \ 'scss': ['css-languageserver', '--stdio']
  \ }
let g:LanguageClient_rootMarkers = {
  \ 'haskell': ['*.cabal', 'stack.yaml'],
  \ 'lhaskell': ['*.cabal', 'stack.yaml'],
  \ 'javascript': ['package.json'],
  \ 'javascript.jsx': ['package.json'],
  \ 'typescript': ['package.json'],
  \ 'sass': ['package.json'],
  \ 'scss': ['package.json']
  \ }

au FileType javascript,css,sass,scss,haskell,lhaskell call LanguageClientKeyBindings()

" }}} -----------------------------------------------------
" Key Mappings {{{ ----------------------------------------

let mapleader = '\'
let maplocalleader = ' '

" Shortcuts for plugin commands.
nnoremap <Leader>p :FZF<CR>
nnoremap <Leader><Leader> :Buffers<CR>
nnoremap <Leader>t :Tags<CR>
nnoremap <Leader>n :Lexplore<CR>
nnoremap <Leader>r :RainbowParentheses!!<CR>
nnoremap <Leader>/ :Lines<CR>
nnoremap <Leader>a :Ack <C-r><C-w><CR>
nnoremap <Leader>w <C-w>v<C-w>l
nnoremap <Leader>d :ALEGoToDefinition<CR>
nnoremap <Leader>q :ALEFix<CR>
nnoremap <Leader>] :ALENextWrap<CR>
nnoremap <Leader>[ :ALEPreviousWrap<CR>
set pastetoggle=<Leader>v

" Open VIMRC with one command.
nnoremap <Leader>rc  :e ~/etc/vim/vimrc<CR>

" Source a modified VIMRC with one command as well.
nnoremap <Leader>src :so ~/etc/vim/vimrc<CR>

" Open help in a vertical split with :vhelp.
cabbrev vhelp botright vert h

" Fix the arrow keys bug in visual mode.
vnoremap <Left>  h
vnoremap <Right> l
vnoremap <Up>    k
vnoremap <Down>  j

" Map CTRL+arrow keys and CTRL+hjkl to switch windows.
nnoremap <C-Left>  <C-w>h
nnoremap <C-Down>  <C-w>j
nnoremap <C-Up>    <C-w>k
nnoremap <C-Right> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Use \x to close the current buffer without closing the window.
nnoremap <Leader>x :bp\|bd #<CR>

" Save, compile, and display errors with \m.
nnoremap <Leader>m :w\|silent! make\|cw<CR><C-l>

" Unset the 'last search pattern' register by hitting return.
nnoremap <CR> :noh<CR><CR>

" When searching, center on the next search term.
nnoremap n nzz
nnoremap N Nzz

" Space to replace words!
" c-Space: Change current word.
" d-Space: Delete current word.
" y-Space: Copy current word.
nnoremap c<Space> ciw
nnoremap d<Space> diw
nnoremap y<Space> yiw

" Map semicolon to colon, to reduce finger strain.
" The (unused) comma key replaces the semicolon.
noremap ; :
noremap , ;

" Quit accidentally hitting F1!
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" CTRL-W shortcuts to match my tmux CTRL-A ones
noremap <C-w>- <C-w>s
noremap <C-w>\| <C-w>v

" Show omni completion with CTRL-Space
inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <C-x><C-o>

" Select from the completion menu with Enter
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Visually select the text that was last edited/pasted (Vimcast#26).
noremap gV `[v`]

" Y yanks from the cursor to the end of line as expected.
nnoremap Y y$

" Make sure pasting in visual mode doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Use Q to show error detail
noremap Q :ALEDetail<CR>

" Forgot-to-unshift versions of :q, :qa, :w, :wq, :wa
command Q :q
command Qa :qa
command W :w
command Wq :wq
command Wa :wa

" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" }}} -----------------------------------------------------

" vim: foldmethod=marker

